import pandas as pd

STRAIN_SAMPLES = [f"CAMIStrain_shortReads_{val}" for val in range(100)] #matches name in sketch
STRAIN_OUTPUT_LOCATION = "/group/ctbrowngrp4/2025-olivas-chillFilter/data/CAMI_strainMadness"
SCALE=10000
KMER_SIZES = [31, 51]
DATABASE= "/group/datalabgrp/ctbrown/2025-cami-old-db/cami-refseq-db.sig.zip"

def get_sigID(wildcards):
	manifestPath = f"{STRAIN_OUTPUT_LOCATION}/shortReads/SOURMASH-MANIFEST.csv"
	manifestDF = pd.read_csv(manifestPath, skiprows=1)
	clean = manifestDF[(manifestDF["name"] == wildcards.sample) & (manifestDF["ksize"] == int(wildcards.kmer))]
	if clean.empty:
		raise ValueError(f"No entry found for sample {wildcards.sample} with k-size {wildcards.kmer} in manifest.")
	cleanString = f"{STRAIN_OUTPUT_LOCATION}/shortReads/{clean["internal_location"].values[0]}"
	return cleanString

rule all:
	input:
		expand(f"{STRAIN_OUTPUT_LOCATION}/shortReads/{{sample}}/k{{kmer}}/{{sample}}_CAMIdb_TaxonomyProfile_Clean.txt", sample=STRAIN_SAMPLES, kmer=KMER_SIZES)

rule results_TaxonKitClean:
	input:
		f"{STRAIN_OUTPUT_LOCATION}/shortReads/{{sample}}/k{{kmer}}/{{sample}}_CAMIdb_TaxonomyProfile.txt"
	output:
		f"{STRAIN_OUTPUT_LOCATION}/shortReads/{{sample}}/k{{kmer}}/{{sample}}_CAMIdb_TaxonomyProfile_Clean.txt"
	run:
		sampleNumber = re.search(r"(\d+)$", wildcards.sample).group(1)
		sampleID = f"strmgCAMI2_short_read_sample_{sampleNumber}"
		
		header_lines = [
			"#CAMI Submission for Taxonomic Profiling\n",
			"@Version:0.10.0\n",
			"@Ranks:superkingdom|phylum|class|order|family|genus|species|strain\n",
			f"@SampleID:{sampleID}\n",
			"@@TAXID\tRANK\tTAXPATH\tTAXPATHSN\tPERCENTAGE\n"
		]
		
		with open(input[0], "r") as infile:
			lines = infile.readlines()
		
		with open(output[0], "w") as outfile:
			outfile.writelines(header_lines)
			outfile.writelines(lines[6:])

rule results_TaxonKit:
	input:
		cleanResults = f"{STRAIN_OUTPUT_LOCATION}/shortReads/{{sample}}/k{{kmer}}/{{sample}}_CAMIdb_Gather_CLEAN.tsv"
	output:
		taxProfile = f"{STRAIN_OUTPUT_LOCATION}/shortReads/{{sample}}/k{{kmer}}/{{sample}}_CAMIdb_TaxonomyProfile.txt"
	shell:
		"""
		taxonkit profile2cami {input.cleanResults} > {output.taxProfile}
		"""

rule cleanResults:
	input:
		gatherResults = f"{STRAIN_OUTPUT_LOCATION}/shortReads/{{sample}}/k{{kmer}}/{{sample}}_CAMIdb_Gather.csv"
	output:
		cleanResults = f"{STRAIN_OUTPUT_LOCATION}/shortReads/{{sample}}/k{{kmer}}/{{sample}}_CAMIdb_Gather_CLEAN.tsv"
	params:
		type = "f_unique_weighted" #intersect_bp, f_unique_to_query, f_unique_weighted
	shell:
		"""
		python3 /group/ctbrowngrp4/2025-olivas-chillFilter/scripts/DIB_TAXOutput_CAMIRefSeq.py {input.gatherResults} {output.cleanResults} {params.type}
		"""
		
rule gatherSketches:
	input:
		database = DATABASE,
		manifest = f"{STRAIN_OUTPUT_LOCATION}/shortReads/SOURMASH-MANIFEST.csv",
	output:
		gatherResults = f"{STRAIN_OUTPUT_LOCATION}/shortReads/{{sample}}/k{{kmer}}/{{sample}}_CAMIdb_Gather.csv"
	params:
		scale = SCALE
	run:
		sigID = get_sigID(wildcards)
		shell(f"sourmash scripts fastmultigather {sigID} {input.database} -s {params.scale} -k {wildcards.kmer} -o {output.gatherResults}")

rule sketchSamples:
	input:
		sketchManifest = f"{STRAIN_OUTPUT_LOCATION}/CAMI_StrainMadness_shortReads_Sketch.csv",
	output:
		zipfile = f"{STRAIN_OUTPUT_LOCATION}/shortReads/CAMI_StrainMadness_Signatures.zip",
		sigDir = directory(f"{STRAIN_OUTPUT_LOCATION}/shortReads/signatures"),
		manifest = f"{STRAIN_OUTPUT_LOCATION}/shortReads/SOURMASH-MANIFEST.csv",
	params:
		scale = SCALE,
		extractDir = f"{STRAIN_OUTPUT_LOCATION}/shortReads"
	shell:
		"""
		sourmash scripts manysketch {input.sketchManifest} -o {output.zipfile} -p dna,k=21,k=31,k=51,scaled={params.scale},abund
		unzip {output.zipfile} -d {params.extractDir}
		"""

rule makeManifest:
	output:
		f"{STRAIN_OUTPUT_LOCATION}/CAMI_StrainMadness_shortReads_Sketch.csv"
	shell:
		"/group/ctbrowngrp4/2025-olivas-chillFilter/scripts/makeManifest_Strain_shortReads.sh"